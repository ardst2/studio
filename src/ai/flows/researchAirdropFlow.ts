
'use server';
/**
 * @fileOverview Genkit flow for researching airdrop potential from text or URL.
 *
 * - researchAirdrop: Analyzes text/URL to provide a research summary.
 * - ResearchAirdropInput - Input type for the flow.
 * - ResearchAirdropOutput - Output type for the flow.
 */

import {ai} from '@/ai/genkit';
import { z } from 'zod';

// --- Schemas ---
const ResearchAirdropInputSchema = z.object({
  textQuery: z.string().min(3, 'Text query must be at least 3 characters long.').optional().describe('A question or text describing the airdrop/project to research.'),
  sourceUrl: z.string().url({ message: "Invalid URL format."}).optional().describe('An optional URL related to the airdrop/project for research context.'),
}).refine(data => data.textQuery || data.sourceUrl, {
  message: 'Either textQuery or sourceUrl must be provided.',
  path: ['textQuery'],
});
export type ResearchAirdropInput = z.infer<typeof ResearchAirdropInputSchema>;

const ResearchAirdropOutputSchema = z.object({
  researchSummary: z.string().optional().describe('A detailed research summary including potential, official links (if found), and key points about the airdrop or project based on the provided input. If no information can be found or generated, this may be an empty string or a message indicating so.'),
  keyPoints: z.array(z.string()).optional().describe('A list of key bullet points from the research.'),
  officialLinks: z.array(z.string()).optional().describe('A list of relevant official URLs found during research (e.g., project website, social media). Only list valid URLs.'),
  sentiment: z.string().optional().describe('A brief analysis of the perceived sentiment or potential (e.g., "High Potential", "Speculative", "Seems Legit").'),
}).describe("The overall result of the airdrop research.");
export type ResearchAirdropOutput = z.infer<typeof ResearchAirdropOutputSchema>;


const researchPrompt = ai.definePrompt({
  name: 'researchAirdropPrompt',
  input: { schema: ResearchAirdropInputSchema },
  output: { schema: ResearchAirdropOutputSchema },
  prompt: `You are an expert crypto airdrop researcher.
Analyze the following text query AND/OR the content implicitly available at the provided URL to generate a research report.
Your goal is to assess the potential of the airdrop/project, identify key information, and find official links.

Input:
{{#if textQuery}}
Text Query/Description:
{{{textQuery}}}
{{/if}}

{{#if sourceUrl}}
Source URL (use for context or direct info if model has access; NOTE: model cannot actively fetch live web content from this URL string alone without a specific tool, but can use it for knowledge retrieval if the URL or domain is known):
{{{sourceUrl}}}
{{/if}}

Output Requirements:
1.  **researchSummary**: Provide a comprehensive summary. Discuss the project, what the airdrop is about, its potential, any red flags, and eligibility if known. If the URL is the primary source, summarize its content relevant to an airdrop.
2.  **keyPoints**: List 3-5 key bullet points derived from your research. These should be concise and informative.
3.  **officialLinks**: If possible, identify and list any official project website, Twitter, Discord, or announcement links. Only list valid URLs.
4.  **sentiment**: Briefly state your perceived sentiment or potential (e.g., "High Potential", "Speculative", "Low Information", "Seems Legit").

If you cannot find substantial information from the provided input, clearly state that in the researchSummary and leave other fields empty or with a note (e.g. "No specific key points identified.").
Do not invent information. Base your report solely on the provided inputs or publicly accessible knowledge related to them.
Return the result as a structured JSON object matching the defined output schema. If an optional field like keyPoints or officialLinks has no data, return an empty array for it or omit the field.
`,
});

const researchAirdropFlowInternal = ai.defineFlow(
  {
    name: 'researchAirdropFlowInternal',
    inputSchema: ResearchAirdropInputSchema,
    outputSchema: ResearchAirdropOutputSchema,
  },
  async (input) => {
    const {output} = await researchPrompt(input);
    if (!output) {
        return { 
            researchSummary: "AI model did not return any output or the output was malformed. Please try a different query or URL.",
            keyPoints: [],
            officialLinks: [],
        };
    }
    // Ensure basic structure even if AI omits optional fields
    return {
        researchSummary: output.researchSummary || "No summary was generated by the AI.",
        keyPoints: output.keyPoints || [],
        officialLinks: output.officialLinks || [],
        sentiment: output.sentiment
    };
  }
);

export async function researchAirdrop(input: ResearchAirdropInput): Promise<ResearchAirdropOutput> {
  return researchAirdropFlowInternal(input);
}

    
